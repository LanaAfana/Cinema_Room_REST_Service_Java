type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'

        compileOnly 'org.projectlombok:lombok:1.18.20'
        annotationProcessor 'org.projectlombok:lombok:1.18.20'

        testCompileOnly 'org.projectlombok:lombok:1.18.20'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'

        implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.1'
    }
  learner_created: false
- name: src/cinema/business/Seat.java
  visible: true
  text: |
    package cinema.business;


    import com.fasterxml.jackson.annotation.JsonIgnore;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Data
    @NoArgsConstructor
    public class Seat {
        private int row;
        private int column;
        private int price;
        @JsonIgnore
        private boolean avaliable;

        public Seat (int row, int column) {
            this.row = row;
            this.column = column;
            this.price = row <= 4 ? 10 : 8;
            this.avaliable = true;
        }


    }
  learner_created: false
- name: src/cinema/presentation/CinemaRoomController.java
  visible: true
  text: |
    package cinema.presentation;

    import cinema.business.CinemaRoom;
    import cinema.business.SeatError;
    import cinema.business.SeatInfo;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    @RestController
    public class CinemaRoomController {

        private final CinemaRoom room;

        @Autowired
        CinemaRoomController(CinemaRoom cinemaRoom) {
            this.room = cinemaRoom; // new CinemaRoom(9, 9);
        }

        @GetMapping("/seats")
        public CinemaRoom getSeats() {
            return room;
        }

        @PostMapping("/purchase")
        public ResponseEntity<?> postPurchase(@RequestBody SeatInfo seatInfo) throws JsonProcessingException {
            if (seatInfo.getRow() < 1 || seatInfo.getRow() > room.getTotalRows() ||
                    seatInfo.getColumn() < 1 || seatInfo.getColumn() > room.getTotalColumns()) {
                return ResponseEntity.badRequest().body(new ObjectMapper().
                        writeValueAsString(new SeatError("The number of a row or a column is out of bounds!")));//"{\n\"error\": \"The number of a row or a column is out of bounds!\"\n}");
            }

            if (room.getSeats().get(seatInfo.getRow() - 1).get(seatInfo.getColumn() - 1).isAvaliable()) {
                return ResponseEntity.ok(room.doPurchase(seatInfo.getRow() - 1, seatInfo.getColumn() - 1));
            } else {
                return ResponseEntity.badRequest().body(new ObjectMapper().
                        writeValueAsString(new SeatError("The ticket has been already purchased!")));
            }
        }
    }
  learner_created: false
- name: src/cinema/business/CinemaRoom.java
  visible: true
  text: |
    package cinema.business;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.Data;
    import org.springframework.stereotype.Component;

    import java.util.ArrayList;
    import java.util.List;

    @Data
    @Component
    public class CinemaRoom {
        @JsonProperty("total_rows")
        private int totalRows;
        @JsonProperty("total_columns")
        private int totalColumns;
        @JsonIgnore
        private List<List<Seat>> seats;
        @JsonProperty("available_seats")
        private List<Seat> avaliableSeats;

        public CinemaRoom() {
            this.totalRows = 9;
            this.totalColumns = 9;

            List<List<Seat>> rows = new ArrayList<>();
            for (int i = 0; i < totalRows; i++) {
                List<Seat> row = new ArrayList<>();
                for (int j = 0; j < totalColumns; j++) {
                    row.add(new Seat(i + 1, j + 1));
                }
                rows.add(row);
            }
            this.seats = rows.stream().toList();
            this.avaliableSeats = setAvaliableSeats();
        }

        public CinemaRoom (int totalRows, int totalColumns) {
            this.totalRows = totalRows;
            this.totalColumns = totalColumns;

            List<List<Seat>> rows = new ArrayList<>();
            for (int i = 0; i < totalRows; i++) {
                List<Seat> row = new ArrayList<>();
                for (int j = 0; j < totalColumns; j++) {
                    row.add(new Seat(i + 1, j + 1));
                }
                rows.add(row);
            }
            this.seats = rows.stream().toList();
            this.avaliableSeats = setAvaliableSeats();
        }

        private List<Seat> setAvaliableSeats() {
            List<Seat> seats = new ArrayList<>();
            for (int i = 0; i < this.totalRows; i++) {
                for (int j = 0; j < this.totalColumns; j++) {
                    if (this.seats.get(i).get(j).isAvaliable())
                        seats.add(this.seats.get(i).get(j));
                }
            }
            return seats.stream().toList();
        }

        public Seat doPurchase(int row, int column) {
            this.seats.get(row).get(column).setAvaliable(false);
            this.avaliableSeats = setAvaliableSeats();
            return this.seats.get(row).get(column);
        }
    }
  learner_created: false
- name: src/cinema/business/SeatError.java
  visible: true
  text: |
    package cinema.business;

    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.swing.*;

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public class SeatError {
        private String error;
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                        resp.getRequest().getMethod() + " " +
                                resp.getRequest().getLocalUri() +
                                " should respond with status code " + status + ", " +
                                "responded: " + resp.getStatusCode() + "\n\n" +
                                "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("available_seats",
                                    isArray(
                                            81,
                                            isObject()
                                                    .value("row", isInteger(i -> i >= 1 && i <= 9))
                                                    .value("column", isInteger(i -> i >= 1 && i <= 9))
                                                    .value("price", isInteger(price -> price == 10 || price == 8))
                                    )
                            )
                            .value("total_columns", 9)
                            .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "1",
                            "column", "1"
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("token", isString())
                                    .value("ticket",
                                            isObject()
                                                    .value("row", 1)
                                                    .value("column", 1)
                                                    .value("price", 10)
                                    )
                    );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "1",
                            "column", "1"
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                                    .anyOtherValues()
                    );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "10",
                            "column", "1"
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                                    .anyOtherValues()
                    );

            response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "1",
                            "column", "10"
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                                    .anyOtherValues()
                    );

            response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "-1",
                            "column", "-1"
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                                    .anyOtherValues()
                    );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", 2,
                            "column", 5
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("token", isString())
                                    .value("ticket",
                                            isObject()
                                                    .value("row", 2)
                                                    .value("column", 5)
                                                    .value("price", 10)
                                    )
                    );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", wrongToken
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                            .anyOtherValues()
            );

            response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", tokenFromResponse
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("returned_ticket",
                                    isObject()
                                            .value("row", 2)
                                            .value("column", 5)
                                            .value("price", 10)
                            )
            );

            return CheckResult.correct();
        }

        CheckResult testTokenInvalidation() {

            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", 3,
                            "column", 6
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("token", isString())
                            .value("ticket",
                                    isObject()
                                            .value("row", 3)
                                            .value("column", 6)
                                            .value("price", 10)
                            )
            );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);
            String tokenFromResponse = jsonResponse.get("token").getAsString();

            response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", tokenFromResponse
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("returned_ticket",
                                    isObject()
                                            .value("row", 3)
                                            .value("column", 6)
                                            .value("price", 10)
                            )
            );

            response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", tokenFromResponse
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                            .anyOtherValues()
            );

            return CheckResult.correct();
        }

        CheckResult testReturnedTicketAvailability() {

            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", 3,
                            "column", 6
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("token", isString())
                            .value("ticket",
                                    isObject()
                                            .value("row", 3)
                                            .value("column", 6)
                                            .value("price", 10)
                            )
            );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);
            String tokenFromResponse = jsonResponse.get("token").getAsString();

            response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", tokenFromResponse
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("returned_ticket",
                                    isObject()
                                            .value("row", 3)
                                            .value("column", 6)
                                            .value("price", 10)
                            )
            );

            response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", 3,
                            "column", 6
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("token", isString())
                            .value("ticket",
                                    isObject()
                                            .value("row", 3)
                                            .value("column", 6)
                                            .value("price", 10)
                            )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
                this::testEndpoint,
                this::testEndpointAvailableSeats,
                this::testPurchaseTicket,
                this::testErrorMessageThatTicketHasBeenPurchased,
                this::testErrorMessageThatNumbersOutOfBounds,
                this::testReturnTicket,
                this::testTokenInvalidation,
                this::testReturnedTicketAvailability
        };
    }
  learner_created: false
- name: src/cinema/business/SeatNumber.java
  visible: true
  learner_created: true
- name: src/cinema/business/ReturnedTicket.java
  visible: true
  learner_created: true
- name: src/cinema/business/Token.java
  visible: true
  learner_created: true
- name: src/cinema/business/Ticket.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/947/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 04 Sep 2023 20:43:18 UTC"
record: 1
